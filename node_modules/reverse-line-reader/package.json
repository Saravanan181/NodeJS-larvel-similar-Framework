{
  "_from": "reverse-line-reader",
  "_id": "reverse-line-reader@0.2.6",
  "_inBundle": false,
  "_integrity": "sha1-HpjYjqyb0VbF1NvzNjaoJ6waej4=",
  "_location": "/reverse-line-reader",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "reverse-line-reader",
    "fetchSpec": "latest",
    "name": "reverse-line-reader",
    "raw": "reverse-line-reader",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/reverse-line-reader/-/reverse-line-reader-0.2.6.tgz",
  "_shasum": "1e98d88eac9bd156c5d4dbf33636a827ac1a7a3e",
  "_spec": "reverse-line-reader",
  "_where": "/Applications/nodejspeojects/ethos",
  "author": {
    "email": "nick@nickewing.net",
    "name": "Nick Ewing"
  },
  "bugs": {
    "url": "https://github.com/paul-em/reverse-line-reader/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Asynchronous line-by-line reverse file reader",
  "devDependencies": {
    "mocha": "^2.2.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "homepage": "https://github.com/paul-em/reverse-line-reader#readme",
  "keywords": [
    "file",
    "line",
    "reader",
    "reverse",
    "scanner"
  ],
  "main": "./lib/line_reader",
  "name": "reverse-line-reader",
  "optionalDependencies": {},
  "readme": "Reverse Line Reader [![Build Status](https://secure.travis-ci.org/paul-em/reverse-line-reader.png?branch=master)](http://travis-ci.org/paul-em/reverse-line-reader)\n===========\n\nAsynchronous reverse line-by-line file reader. This started as a fork of Nick Ewing's [line-reader](https://github.com/nickewing/line-reader). Major parts are rewritten to read the file from bottom to top, but the api works more or less the same.\n\nInstall\n-------\n\n`npm install reverse-line-reader`\n\nUsage\n-----\n\nThe `eachLine` function reads each line of the given file.  Upon each new line,\nthe given callback function is called with two parameters: the line read and a\nboolean value specifying whether the line read was the last line of the file (on the top of the file).\nIf the callback returns `false`, reading will stop.\n\n    var lineReader = require('reverse-line-reader');\n\n    lineReader.eachLine('file.txt', function(line, last) {\n      console.log(line);\n\n      if (/* done */) {\n        return false; // stop reading\n      }\n    });\n\n`eachLine` can also be used in an asynchronous manner by providing a third\ncallback parameter like so:\n\n    var lineReader = require('reverse-line-reader');\n\n    lineReader.eachLine('file.txt', function(line, last, cb) {\n      console.log(line);\n\n      if (/* done */) {\n        cb(false); // stop reading\n      } else {\n        cb();\n      }\n    });\n\nThe `eachLine` function also returns an object with one property, `then`.  If a\ncallback is provided to `then`, it will be called once all lines have been read.\n\n    var lineReader = require('reverse-line-reader');\n\n    // read all lines:\n    lineReader.eachLine('file.txt', function(line) {\n      console.log(line);\n    }).then(function () {\n      console.log(\"I'm done!!\");\n    });\n\n\nContributors\n------------\n\n* Paul Em\n* Nick Ewing\n* Jameson Little (beatgammit)\n\nCopyright 2015 Paul Em.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paul-em/reverse-line-reader.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "url": "https://github.com/paul-em/reverse-line-reader",
  "version": "0.2.6"
}
